/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include "main.h"

#define SYSTICK_RELOAD_VALUE (SystemCoreClock) / 1000 - 1
#define BUTTON_MODE_TOGGLE 0
#define BUTTON_MODE_HOLD 1

void delay(uint32_t time);

void ButtonMode(bool);


int main(void)
{
	SystemCoreClockUpdate();

	PWR->CR |= PWR_CR_VOS;

	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_3WS;

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;

	GPIOD->MODER |= GPIO_MODER_MODE12_0 |
					GPIO_MODER_MODE13_0 |
					GPIO_MODER_MODE14_0 |
					GPIO_MODER_MODE15_0; // set GPIO to "output" mode for LEDs

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLQ_3;
	RCC->PLLCFGR &= ~(	RCC_PLLCFGR_PLLQ_0 	|
						RCC_PLLCFGR_PLLQ_1 	|
						RCC_PLLCFGR_PLLQ_2	);

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP_1);

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_2;
	RCC->PLLCFGR &= ~(	RCC_PLLCFGR_PLLM_0	|
						RCC_PLLCFGR_PLLM_1 	|
						RCC_PLLCFGR_PLLM_3 	|
						RCC_PLLCFGR_PLLM_4 	|
						RCC_PLLCFGR_PLLM_5	);

	RCC->CR |= RCC_CR_HSEON;
	while(!(RCC->CR & RCC_CR_HSERDY)){}
	if(RCC->CR & RCC_CR_HSERDY){
		GPIOD->ODR |= GPIO_ODR_OD15;
	}

	RCC->CR |= RCC_CR_PLLON;
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
	if(RCC->CR & RCC_CR_PLLRDY){
		GPIOD->ODR |= GPIO_ODR_OD14;
	}

	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_SW_PLL;
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){}
	if(RCC->CFGR & RCC_CFGR_SWS_PLL){
		GPIOD->ODR |= GPIO_ODR_OD13;
	}

	SystemCoreClockUpdate();
    /* Loop forever */
	while(1){
		ButtonMode(BUTTON_MODE_TOGGLE);
	}

}


void delay(uint32_t timeMS){
	for(uint32_t i = 0; i < timeMS * 7059; i++){} //7059 is from experimentation
}

void ButtonMode(int mode){
	if(mode = BUTTON_MODE_TOGGLE){
		GPIOD->ODR ^= GPIO_ODR_OD12;
		delay(200); //de-bounce
	}
	if(mode = BUTTON_MODE_HOLD){
		while(GPIOA->IDR & GPIO_IDR_IDR_0){
			GPIOD->ODR |= GPIO_ODR_OD12;
		}
		GPIOD->ODR &= ~GPIO_ODR_OD12;
	}
}

