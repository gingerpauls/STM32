/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include "main.h"
#define SYSTICK_RELOAD_VALUE (SystemCoreClock) / 1000 - 1
void delay(uint32_t time);

int main(void)
{
	SystemCoreClockUpdate();

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;

	GPIOD->MODER |= GPIO_MODER_MODE12_0 |
					GPIO_MODER_MODE13_0 |
					GPIO_MODER_MODE14_0 |
					GPIO_MODER_MODE15_0; // set GPIO to output for LEDs


	//while(!(RCC->CR & RCC_CR_HSIRDY)){}

//	  OscillatorType = RCC_OSCILLATORTYPE_HSI;
//	  HSIState = RCC_HSI_ON;
//	  HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
//	  PLL.PLLState = RCC_PLL_ON;
//	  PLL.PLLSource = RCC_PLLSOURCE_HSI;
//	  PLL.PLLM = 8;
//	  PLL.PLLN = 192;
//	  PLL.PLLP = RCC_PLLP_DIV4;
//	  PLL.PLLQ = 8;

	if(RCC->CR & ~RCC_CR_PLLRDY){
		GPIOD->ODR |= 	GPIO_ODR_OD14;
	}

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLQ_3;
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ_2;

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM_4;


//	RCC->PLLCFGR &= ~(	RCC_PLLCFGR_PLLQ_Msk 	| // check this first for wrong configuration
//						RCC_PLLCFGR_PLLSRC_Msk 	|
//						RCC_PLLCFGR_PLLP_Msk 	|
//						RCC_PLLCFGR_PLLN_Msk 	|
//						RCC_PLLCFGR_PLLM_Msk	);

	RCC->PLLCFGR |=  (	RCC_PLLCFGR_PLLQ_3 				|
						RCC_PLLCFGR_PLLP_0 				|
						//(0xC0<<RCC_PLLCFGR_PLLN_Pos) 	|
						RCC_PLLCFGR_PLLM_3				);

	PWR->CR |= PWR_CR_VOS;

	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_3WS;

	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_SW_PLL;
	//while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){}

	RCC->CR |= RCC_CR_PLLON; // add RCC_CR_PLLI2SON / RCC_CR_HSICAL_4 later?
	//while(!(RCC->CR & RCC_CR_PLLRDY)){}

	if(RCC->CR & RCC_CR_PLLRDY){
		GPIOD->ODR |= GPIO_ODR_OD15;
	}



	SystemCoreClockUpdate();
    /* Loop forever */
	while(1){
		GPIOD->ODR ^= 	GPIO_ODR_OD12;
		delay(1000);
	}
}


void delay(uint32_t timeMS){
	for(uint32_t i = 0; i < timeMS * 1000; i++){}
}
